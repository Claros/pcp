<?php

namespace JE\FinancesBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Query;
use JE\StatBundle\Entity\DateRange;

/**
 * SupplierInvoiceRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class SupplierInvoiceRepository extends EntityRepository
{
    public function queryAll()
    {
        return $this->createQueryBuilder('i')
            ->orderBy('i.createdAt');
    }

    public function yearRange()
    {
        $qb = $this->createQueryBuilder('i')
            ->select('MAX(YEAR(i.createdAt)) maxCreatedAt, MIN(YEAR(i.createdAt)) minCreatedAt');

        $result = $qb->getQuery()->getSingleResult(Query::HYDRATE_ARRAY);

        return array(
            'max' => $result['maxCreatedAt'],
            'min' => $result['minCreatedAt'],
        );
    }

    public function findFromMonth($month, $year)
    {
        $qb = $this->createQueryBuilder('i')
            ->where('MONTH(i.createdAt) = :month')
            ->setParameter('month', $month)
            ->andWhere('YEAR(i.createdAt) = :year')
            ->setParameter('year', $year)
            ->orderBy('i.createdAt');

        return $qb->getQuery()->getResult();
    }

    public function sumFromMonth($month, $year)
    {
        $qb = $this->createQueryBuilder('i')
            ->select('SUM(i.totalAmount)/100 totalAmount')
            ->addSelect('SUM(i.taxesHigh)/100 taxesHigh')
            ->addSelect('SUM(i.taxesMedium)/100 taxesMedium')
            ->addSelect('SUM(i.taxesLow)/100 taxesLow')
            ->where('MONTH(i.createdAt) = :month')
            ->setParameter('month', $month)
            ->andWhere('YEAR(i.createdAt) = :year')
            ->setParameter('year', $year);

        $result = $qb->getQuery()->getSingleResult();
        $result['taxesAmount']  = $result['taxesHigh'] + $result['taxesMedium'] + $result['taxesLow'];
        $result['amount']       = $result['totalAmount'] - $result['taxesAmount'];

        return $result;
    }

    public function sumFromRange(DateRange $range)
    {
        $qb = $this->createQueryBuilder('i')
            ->select('SUM(i.totalAmount)/100 totalAmount')
            ->addSelect('SUM(i.taxesHigh)/100 taxesHigh')
            ->addSelect('SUM(i.taxesMedium)/100 taxesMedium')
            ->addSelect('SUM(i.taxesLow)/100 taxesLow')
            ->addSelect('MONTH(i.createdAt) month')
            ->addSelect('YEAR(i.createdAt) year')
            ->where('i.createdAt >= :from')
            ->setParameter('from', $range->getFrom())
            ->andWhere('i.createdAt <= :to')
            ->setParameter('to', $range->getTo())
            ->groupBy('year, month')
            ->orderBy('year, month')
        ;

        $data = array_map(function(){
            return array(
                'amount' => 0,
                'taxesAmount' => 0,
                'totalAmount' => 0,
                'taxesHigh' => 0,
                'taxesMedium' => 0,
                'taxesLow' => 0,
            );
        },$range->getMonthsArray());

        $results = $qb->getQuery()->getResult();
        foreach($results as $result){
            $data[$result['year'].$result['month']] = array(
                'amount' => $result['totalAmount'] - ($result['taxesHigh'] + $result['taxesMedium'] + $result['taxesLow']),
                'taxesAmount' => $result['taxesHigh'] + $result['taxesMedium'] + $result['taxesLow'],
                'totalAmount' => $result['totalAmount'],
                'taxesHigh' => $result['taxesHigh'],
                'taxesMedium' => $result['taxesMedium'],
                'taxesLow' => $result['taxesLow'],
            );
        }

        return $data;
    }
}
